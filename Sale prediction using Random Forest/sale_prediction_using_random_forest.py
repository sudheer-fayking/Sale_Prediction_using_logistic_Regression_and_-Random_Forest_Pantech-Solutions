# -*- coding: utf-8 -*-
"""Sale Prediction using Random Forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kgo68kPe4wBsLh0tir1m6jLy1t6JKnDX

## 1. Problem Statement - Based on age and salary of customers, predict if he purchases product or not

#### Importing Libraries
"""

import pandas as pd
import numpy as np

"""## 2. Collecting Data
#### Choose data set available
"""

from google.colab import files
uploaded=files.upload()

"""## 3. Loading and getting summary on dataset"""

data=pd.read_csv("/content/DigitalAd_dataset.csv")
data

# to get rows and columns
data.shape

# to get top 5 rows of data
data.head()

"""## 4. Analyse data and split into X and Y(inputs and outputs)"""

# Input 

X=data.iloc[:,:-1].values
X

# output

Y=data.iloc[:,-1].values
Y

"""## Split data into train and test"""

# To split data using sklearn library

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.30,random_state=0)

"""## Normalising the values"""

# using standardscaler, we are normalising the input data sets
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train) 
X_test = sc.transform(X_test)

"""##Training the train data"""

from sklearn.ensemble import RandomForestClassifier  
classifier= RandomForestClassifier(n_estimators= 20, criterion="entropy")  
classifier.fit(X_train, Y_train)

y2_pred= classifier.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
print("Accuracy of the Model: {0}%".format(accuracy_score(Y_test, y2_pred)*100))

age = int(input("Enter New Customer Age: "))
sal = int(input("Enter New Customer Salary: "))
newCust = [[age,sal]]
result = classifier.predict(sc.transform(newCust))
print(result)
if result == 1:
  print("Customer will Buy")
else:
  print("Customer won't Buy")